package keeper_test

import (
	"testing"

	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
	"github.com/stretchr/testify/require"

    keepertest "<%= ModulePath %>/testutil/keeper"
    "<%= ModulePath %>/x/<%= ModuleName %>/keeper"
    "<%= ModulePath %>/x/<%= ModuleName %>/types"
)

func Test<%= TypeName.UpperCamel %>MsgServerCreate(t *testing.T) {
	k, ctx, addressCodec := keepertest.<%= title(ModuleName) %>Keeper(t)
	srv := keeper.NewMsgServerImpl(k)
	<%= MsgSigner.LowerCamel %>, err := addressCodec.BytesToString([]byte("signerAddr__________________"))
	require.NoError(t, err)
	expected := &types.MsgCreate<%= TypeName.UpperCamel %>{<%= MsgSigner.UpperCamel %>: <%= MsgSigner.LowerCamel %>}
    _, err = srv.Create<%= TypeName.UpperCamel %>(ctx, expected)
    require.NoError(t, err)
    rst, err := k.<%= TypeName.UpperCamel %>.Get(ctx)
    require.Nil(t, err)
    require.Equal(t, expected.<%= MsgSigner.UpperCamel %>, rst.<%= MsgSigner.UpperCamel %>)
}

func Test<%= TypeName.UpperCamel %>MsgServerUpdate(t *testing.T) {
	k, ctx, addressCodec := keepertest.<%= title(ModuleName) %>Keeper(t)
	<%= MsgSigner.LowerCamel %>, err := addressCodec.BytesToString([]byte("signerAddr__________________"))
	require.NoError(t, err)

	unauthorizedAddr, err := addressCodec.BytesToString([]byte("unauthorizedAddr___________"))
	require.NoError(t, err)

	srv := keeper.NewMsgServerImpl(k)
	expected := &types.MsgCreate<%= TypeName.UpperCamel %>{<%= MsgSigner.UpperCamel %>: <%= MsgSigner.LowerCamel %>}
	_, err = srv.Create<%= TypeName.UpperCamel %>(ctx, expected)
	require.NoError(t, err)

	tests := []struct {
		desc    string
		request *types.MsgUpdate<%= TypeName.UpperCamel %>
		err     error
	}{
		{
			desc:    "invalid address",
			request: &types.MsgUpdate<%= TypeName.UpperCamel %>{<%= MsgSigner.UpperCamel %>: "invalid"},
			err:     sdkerrors.ErrInvalidAddress,
		},
		{
			desc:    "unauthorized",
			request: &types.MsgUpdate<%= TypeName.UpperCamel %>{<%= MsgSigner.UpperCamel %>: unauthorizedAddr},
			err:     sdkerrors.ErrUnauthorized,
		},
		{
			desc:    "completed",
			request: &types.MsgUpdate<%= TypeName.UpperCamel %>{<%= MsgSigner.UpperCamel %>: <%= MsgSigner.LowerCamel %>},
		},
	}
	for _, tc := range tests {
		t.Run(tc.desc, func(t *testing.T) {
			_, err = srv.Update<%= TypeName.UpperCamel %>(ctx, tc.request)
			if tc.err != nil {
				require.ErrorIs(t, err, tc.err)
			} else {
				require.NoError(t, err)
				rst, err := k.<%= TypeName.UpperCamel %>.Get(ctx)
				require.Nil(t, err)
				require.Equal(t, expected.<%= MsgSigner.UpperCamel %>, rst.<%= MsgSigner.UpperCamel %>)
			}
		})
	}
}

func Test<%= TypeName.UpperCamel %>MsgServerDelete(t *testing.T) {
	k, ctx, addressCodec := keepertest.<%= title(ModuleName) %>Keeper(t)
	<%= MsgSigner.LowerCamel %>, err := addressCodec.BytesToString([]byte("signerAddr__________________"))
	require.NoError(t, err)

	unauthorizedAddr, err := addressCodec.BytesToString([]byte("unauthorizedAddr___________"))
	require.NoError(t, err)

	srv := keeper.NewMsgServerImpl(k)
	_, err = srv.Create<%= TypeName.UpperCamel %>(ctx, &types.MsgCreate<%= TypeName.UpperCamel %>{<%= MsgSigner.UpperCamel %>: <%= MsgSigner.LowerCamel %>})
	require.NoError(t, err)

	tests := []struct {
		desc    string
		request *types.MsgDelete<%= TypeName.UpperCamel %>
		err     error
	}{
		{
			desc:    "invalid address",
			request: &types.MsgDelete<%= TypeName.UpperCamel %>{<%= MsgSigner.UpperCamel %>: "invalid"},
			err:     sdkerrors.ErrInvalidAddress,
		},
		{
			desc:    "unauthorized",
			request: &types.MsgDelete<%= TypeName.UpperCamel %>{<%= MsgSigner.UpperCamel %>: unauthorizedAddr},
			err:     sdkerrors.ErrUnauthorized,
		},
		{
			desc:    "completed",
			request: &types.MsgDelete<%= TypeName.UpperCamel %>{<%= MsgSigner.UpperCamel %>: <%= MsgSigner.LowerCamel %>},
		},
	}
	for _, tc := range tests {
		t.Run(tc.desc, func(t *testing.T) {
			_, err = srv.Delete<%= TypeName.UpperCamel %>(ctx, tc.request)
			if tc.err != nil {
				require.ErrorIs(t, err, tc.err)
			} else {
				require.NoError(t, err)
				found, err := k.<%= TypeName.UpperCamel %>.Has(ctx)
				require.NoError(t, err)
				require.False(t, found)
			}
		})
	}
}
