package <%= moduleName %>_test

import (
	"testing"

	keepertest "<%= modulePath %>/testutil/keeper"
	"<%= modulePath %>/testutil/nullify"
	<%= moduleName %> "<%= modulePath %>/x/<%= moduleName %>/module"
	"<%= modulePath %>/x/<%= moduleName %>/types"
	"github.com/stretchr/testify/require"
)

func TestGenesis(t *testing.T) {
	genesisState := types.GenesisState{
		Params:	types.DefaultParams(),
		<%= if (isIBC) { %>PortId: types.PortID,<% } %>
		// this line is used by starport scaffolding # genesis/test/state
	}

	k, ctx, _ := keepertest.<%= title(moduleName) %>Keeper(t)
	err := <%= moduleName %>.InitGenesis(ctx, k, genesisState)
	require.NoError(t, err)
	got, err := <%= moduleName %>.ExportGenesis(ctx, k)
	require.NoError(t, err)
	require.NotNil(t, got)

	nullify.Fill(&genesisState)
	nullify.Fill(got)

	<%= if (isIBC) { %>require.Equal(t, genesisState.PortId, got.PortId)<% } %>
	require.Equal(t, genesisState.Params, got.Params)
	// this line is used by starport scaffolding # genesis/test/assert
}
